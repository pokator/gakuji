// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options, urlSearchParamsBodySerializer } from '@hey-api/client-fetch';
import type { RootGetError, RootGetResponse, GetCurrentCaregiverUsersGetError, GetCurrentCaregiverUsersGetResponse, ReadUsersMeAuthCurrentUserGetError, ReadUsersMeAuthCurrentUserGetResponse, CreateNewUserAuthCreateUserPostData, CreateNewUserAuthCreateUserPostError, CreateNewUserAuthCreateUserPostResponse, SetAccessTokenAuthTokenPostData, SetAccessTokenAuthTokenPostError, SetAccessTokenAuthTokenPostResponse, AddSongSpotSongAddSongSpotPostData, AddSongSpotSongAddSongSpotPostError, AddSongSpotSongAddSongSpotPostResponse, AddSongManualSongAddSongManualPostData, AddSongManualSongAddSongManualPostError, AddSongManualSongAddSongManualPostResponse, GetSongSongGetSongGetData, GetSongSongGetSongGetError, GetSongSongGetSongGetResponse, GetWordSongGetWordGetData, GetWordSongGetWordGetError, GetWordSongGetWordGetResponse, GetSongsSongGetSongsGetError, GetSongsSongGetSongsGetResponse, GetGlobalSongsSongGetGlobalSongsGetData, GetGlobalSongsSongGetGlobalSongsGetError, GetGlobalSongsSongGetGlobalSongsGetResponse, GetListsListsGetListsGetError, GetListsListsGetListsGetResponse, AddListListsAddListPostData, AddListListsAddListPostError, AddListListsAddListPostResponse, DeleteListListsDeleteListDeleteData, DeleteListListsDeleteListDeleteError, DeleteListListsDeleteListDeleteResponse, GetAlistListsGetAlistGetData, GetAlistListsGetAlistGetError, GetAlistListsGetAlistGetResponse, GetTypeListsListsGetTypeListsGetData, GetTypeListsListsGetTypeListsGetError, GetTypeListsListsGetTypeListsGetResponse, CheckAllListsListsCheckAllListsGetData, CheckAllListsListsCheckAllListsGetError, CheckAllListsListsCheckAllListsGetResponse, DeleteWordListsDeleteWordDeleteData, DeleteWordListsDeleteWordDeleteError, DeleteWordListsDeleteWordDeleteResponse, AddWordListsAddWordPostData, AddWordListsAddWordPostError, AddWordListsAddWordPostResponse, GetWordDataListsGetWordDataGetData, GetWordDataListsGetWordDataGetError, GetWordDataListsGetWordDataGetResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Root
 */
export const rootGet = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<RootGetResponse, RootGetError, ThrowOnError>({
    ...options,
    url: '/'
}); };

/**
 * a sample summary for our get users endpoint
 */
export const getCurrentCaregiverUsersGet = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetCurrentCaregiverUsersGetResponse, GetCurrentCaregiverUsersGetError, ThrowOnError>({
    ...options,
    url: '/users'
}); };

/**
 * Read Users Me
 */
export const readUsersMeAuthCurrentUserGet = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<ReadUsersMeAuthCurrentUserGetResponse, ReadUsersMeAuthCurrentUserGetError, ThrowOnError>({
    ...options,
    url: '/auth/current-user'
}); };

/**
 * Create New User
 */
export const createNewUserAuthCreateUserPost = <ThrowOnError extends boolean = false>(options: Options<CreateNewUserAuthCreateUserPostData, ThrowOnError>) => { return (options?.client ?? client).post<CreateNewUserAuthCreateUserPostResponse, CreateNewUserAuthCreateUserPostError, ThrowOnError>({
    ...options,
    url: '/auth/create-user'
}); };

/**
 * Set Access Token
 */
export const setAccessTokenAuthTokenPost = <ThrowOnError extends boolean = false>(options: Options<SetAccessTokenAuthTokenPostData, ThrowOnError>) => { return (options?.client ?? client).post<SetAccessTokenAuthTokenPostResponse, SetAccessTokenAuthTokenPostError, ThrowOnError>({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
    },
    url: '/auth/token'
}); };

/**
 * Add Song Spot
 */
export const addSongSpotSongAddSongSpotPost = <ThrowOnError extends boolean = false>(options?: Options<AddSongSpotSongAddSongSpotPostData, ThrowOnError>) => { return (options?.client ?? client).post<AddSongSpotSongAddSongSpotPostResponse, AddSongSpotSongAddSongSpotPostError, ThrowOnError>({
    ...options,
    url: '/song/add-song-spot'
}); };

/**
 * Add Song Manual
 */
export const addSongManualSongAddSongManualPost = <ThrowOnError extends boolean = false>(options: Options<AddSongManualSongAddSongManualPostData, ThrowOnError>) => { return (options?.client ?? client).post<AddSongManualSongAddSongManualPostResponse, AddSongManualSongAddSongManualPostError, ThrowOnError>({
    ...options,
    url: '/song/add-song-manual'
}); };

/**
 * Get Song
 */
export const getSongSongGetSongGet = <ThrowOnError extends boolean = false>(options?: Options<GetSongSongGetSongGetData, ThrowOnError>) => { return (options?.client ?? client).get<GetSongSongGetSongGetResponse, GetSongSongGetSongGetError, ThrowOnError>({
    ...options,
    url: '/song/get-song'
}); };

/**
 * Get Word
 */
export const getWordSongGetWordGet = <ThrowOnError extends boolean = false>(options?: Options<GetWordSongGetWordGetData, ThrowOnError>) => { return (options?.client ?? client).get<GetWordSongGetWordGetResponse, GetWordSongGetWordGetError, ThrowOnError>({
    ...options,
    url: '/song/get-word'
}); };

/**
 * Get Songs
 */
export const getSongsSongGetSongsGet = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetSongsSongGetSongsGetResponse, GetSongsSongGetSongsGetError, ThrowOnError>({
    ...options,
    url: '/song/get-songs'
}); };

/**
 * Get Global Songs
 */
export const getGlobalSongsSongGetGlobalSongsGet = <ThrowOnError extends boolean = false>(options?: Options<GetGlobalSongsSongGetGlobalSongsGetData, ThrowOnError>) => { return (options?.client ?? client).get<GetGlobalSongsSongGetGlobalSongsGetResponse, GetGlobalSongsSongGetGlobalSongsGetError, ThrowOnError>({
    ...options,
    url: '/song/get-global-songs'
}); };

/**
 * Get Lists
 */
export const getListsListsGetListsGet = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetListsListsGetListsGetResponse, GetListsListsGetListsGetError, ThrowOnError>({
    ...options,
    url: '/lists/get-lists'
}); };

/**
 * Add List
 */
export const addListListsAddListPost = <ThrowOnError extends boolean = false>(options: Options<AddListListsAddListPostData, ThrowOnError>) => { return (options?.client ?? client).post<AddListListsAddListPostResponse, AddListListsAddListPostError, ThrowOnError>({
    ...options,
    url: '/lists/add-list'
}); };

/**
 * Delete List
 */
export const deleteListListsDeleteListDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteListListsDeleteListDeleteData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteListListsDeleteListDeleteResponse, DeleteListListsDeleteListDeleteError, ThrowOnError>({
    ...options,
    url: '/lists/delete-list'
}); };

/**
 * Get A List
 */
export const getAListListsGetAListGet = <ThrowOnError extends boolean = false>(options: Options<GetAlistListsGetAlistGetData, ThrowOnError>) => { return (options?.client ?? client).get<GetAlistListsGetAlistGetResponse, GetAlistListsGetAlistGetError, ThrowOnError>({
    ...options,
    url: '/lists/get-a-list'
}); };

/**
 * Get Type Lists
 */
export const getTypeListsListsGetTypeListsGet = <ThrowOnError extends boolean = false>(options: Options<GetTypeListsListsGetTypeListsGetData, ThrowOnError>) => { return (options?.client ?? client).get<GetTypeListsListsGetTypeListsGetResponse, GetTypeListsListsGetTypeListsGetError, ThrowOnError>({
    ...options,
    url: '/lists/get-type-lists'
}); };

/**
 * Check All Lists
 */
export const checkAllListsListsCheckAllListsGet = <ThrowOnError extends boolean = false>(options: Options<CheckAllListsListsCheckAllListsGetData, ThrowOnError>) => { return (options?.client ?? client).get<CheckAllListsListsCheckAllListsGetResponse, CheckAllListsListsCheckAllListsGetError, ThrowOnError>({
    ...options,
    url: '/lists/check-all-lists'
}); };

/**
 * Delete Word
 */
export const deleteWordListsDeleteWordDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteWordListsDeleteWordDeleteData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteWordListsDeleteWordDeleteResponse, DeleteWordListsDeleteWordDeleteError, ThrowOnError>({
    ...options,
    url: '/lists/delete-word'
}); };

/**
 * Add Word
 */
export const addWordListsAddWordPost = <ThrowOnError extends boolean = false>(options: Options<AddWordListsAddWordPostData, ThrowOnError>) => { return (options?.client ?? client).post<AddWordListsAddWordPostResponse, AddWordListsAddWordPostError, ThrowOnError>({
    ...options,
    url: '/lists/add-word'
}); };

/**
 * Get Word Data
 */
export const getWordDataListsGetWordDataGet = <ThrowOnError extends boolean = false>(options: Options<GetWordDataListsGetWordDataGetData, ThrowOnError>) => { return (options?.client ?? client).get<GetWordDataListsGetWordDataGetResponse, GetWordDataListsGetWordDataGetError, ThrowOnError>({
    ...options,
    url: '/lists/get-word-data'
}); };